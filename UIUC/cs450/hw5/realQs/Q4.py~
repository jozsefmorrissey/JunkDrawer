from __future__ import division

import math
import numpy as np
import time as time

import sympy as sp
from sympy import *
import scipy as sc
from scipy import optimize
from pdb import set_trace as bp
from sympy import init_printing

fml = sp.Matrix([0,0])
fyl = sp.Matrix([0,0])
x, y = sp.symbols('x y')
f = sp.Matrix([100*(y - x**2)**2 + (1 - x)**2])
gradientf = f.jacobian([x,y])
hessianf = gradientf.jacobian([x,y])

def distance(x):
	return math.sqrt((x[0] - 1)*(x[0] - 1) + (x[1] - 1)*(x[1] - 1))


def newtonsLineSearch(xx, s):
	aa = 0
	a = sp.symbols('a')
	xxx = xx + a*s
	pk = f.subs([(x, xxx[0]), (y, xxx[1])])
	p = pk.jacobian([a])
	dp = p.jacobian([a])
	for i in range (0, 8):
		pp = p.subs([(a, aa)])[0].evalf()
		dpp = dp.subs([(a, aa)])[0].evalf()
		aa = (aa - pp/dpp).evalf()

	return aa




residual = np.zeros((2,3,11))
valBank = np.array([[-1,1],[0,1],[2,1]])

for i in range (0, 3):
	xx = valBank[i].T
	it = 0
	while(it < 11):
		H = hessianf.subs([(x, xx[0]), (y, xx[1])])
		grad = gradientf.subs([(x, xx[0]), (y, xx[1])]).T
		sk = H.LUsolve(-grad)
		xx = xx + sk
		if (distance(xx) < 1e-16):
			break
		it += 1

	print "Initial Values:"
	print "x: ", valBank[i][0], "\t y:", valBank[i][1]
	print "Final Values:"
	print "x: ", xx[0].evalf(), "\t y: ", xx[1].evalf()
	print "Number of Iterations:\n", it
	print "Residual:"
	pprint((xx-sp.Matrix([1,1])).evalf())
	print



for i in range (0, 3):
	xx = valBank[i].T
	print "Round: " , i
	it = 0
	while(True):
		sk = -gradientf.subs([(x, xx[0]), (y, xx[1])]).T
		retVal = newtonsLineSearch(xx, sk)
		alpha = retVal
		xx = xx + alpha*sk
		if (distance(xx) < 1e-12):
			break
		it += 1

	print "Initial Values:"
	print "x: ", valBank[i][0], "\t y:", valBank[i][1]
	print "Final Values:"
	print "x: ", xx[0], "\t y: ", xx[1]
	print "Number of Iterations:\n", it
	print "Residual:"
	pprint((xx-sp.Matrix([1,1])).evalf())
	print		







