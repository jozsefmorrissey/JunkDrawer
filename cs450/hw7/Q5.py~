from __future__ import division

import math
import numpy as np
import time as time
import matplotlib.pyplot as plt

import scipy as sc
from scipy import optimize
from pdb import set_trace as bp



def Dhat(x):
    #                                                 ^
    #     Compute the interpolatory derivative matrix D_ij associated
    #     with nodes x_j such that
    #
    #                ^
    #            w = D*u   
    #            -     -
    #
    #     returns the derivative of u at the points x_i.
    #

    n1 = len(x)
    w = np.zeros((n1,2))
    Dh = np.zeros((n1,n1))
    for i in range(n1):
        w = fd_weights_full(x[i], x, 1)
        Dh[:, i] = w[:, 1]
    Dh = np.transpose(Dh)
    return Dh

#-----------------------------------------------------------------------

def fd_weights_full(xx, x, m):
    #
    #     This routine evaluates the derivative based on all points
    #     in the stencils.  It is more memory efficient than "fd_weights"
    #
    #     This set of routines comes from the appendix of 
    #     A Practical Guide to Pseudospectral Methods, B. Fornberg
    #     Cambridge Univ. Press, 1996.   (pff)
    #
    #     Input parameters:
    #       xx -- point at wich the approximations are to be accurate
    #       x  -- array of x-ordinates:   x(0:n)
    #       m  -- highest order of derivative to be approxxmated at xi
    #
    #     Output:
    #       c  -- set of coefficients c(0:n,0:m).
    #             c(j,k) is to be applied at x(j) when
    #             the kth derivative is approximated by a 
    #             stencil extending over x(0),x(1),...x(n).
    #
    #
    #     Follows p. 168--169 of Fornberg's book.
    #

    n1 = len(x)
    n = n1-1
    m1 = m+1
    c1 = 1.
    c4 = x[0]-xx
    c = np.zeros((n1, m1))
    c[0, 0] = 1.

    for i in range(n):
        i1 = i+1
        mn = min(i1, m)
        mn1 = mn+1
        c2 = 1.
        c5 = c4
        c4 = x[i1]-xx
        for j in range(i+1):
            c3 = x[i1]-x[j]
            c2 = c2*c3
            for k in range(mn,0,-1):
                c[i1, k] = c1*(k*c[i1-1, k-1]-c5*c[i1-1, k])/c2
            c[i1,0] = -c1*c5*c[i1-1,0]/c2
            for k in range(mn,0,-1):
                c[j,k] = (c4*c[j,k]-k*c[j,k-1])/c3
            c[j,0] = c4*c[j,0]/c3
        c1 = c2
    return c


def uniform(a, b, n):
	RET = np.zeros((n))
	RET[0] = a
	RET[n-1] = b
	step = (b - a)/(n-1)
	for i in range (1, n-1):
		RET[i] = RET[i-1] + step

	return RET


def cheby(a, b, n):
	RET = np.zeros((n))

	for i in range (0, n):
		RET[n - i - 1] = (b - a)*(1 + math.cos((math.pi*i)/(n - 1)))/2
	return RET


def solution(x, c, v):
	coef = 1/c
	num = math.exp((c*x)/v) - 1
	denom = math.exp(c/v) - 1
	return coef*(x - num/denom)


def calc_error(u, x, n, c, v):
	maxi = math.fabs(u[0] - solution(x[0], c, v))
	for i in range (1, n):
		if(math.fabs(u[i] - solution(x[i], c, v)) > maxi):
			maxi = math.fabs(u[i] - solution(x[i], c, v))
	return maxi

def solution_vector(n):
	RET = np.zeros((n, 1))
	RET[0][0] = 0
	RET[n-1][0] = 0
	for i in range (1, n-1):
		RET[i][0] = 1
	return RET

def magic(M, n):
	M[0][0] = 1
	M[n-1][n-1] = 1
	for i in range (1, n):
		M[0][i] = 0
		M[n-1][i - 1] = 0
	return M

def build_it(a, b, n, c, v, h):
	RET = np.zeros((n, n))
	RET[0][0] = 1
	RET[-1][-1] = 1
	for i in range (1, n - 1):
		RET[i][i + 1] = c/(2.0*h) - v/h**2
		RET[i][i] = (2.0*v)/h**2
		RET[i][i - 1] = -v/h**2 - c/(2.0*h)
	return RET
	




a = 0.0
b = 1.0
c = 1.0
v = .1

sol = np.zeros((400))
x = uniform(a, b, 400)
for i in range (0, 400):
	sol[i] = solution(x[i], c, v)

plt.plot(x, sol, label = 'solution')

error = np.zeros((2, 3, 47)) 
count = np.zeros((47))

for i in range(4, 51):
	x = uniform(0, 1, i)
	ace = build_it(a, b, i, c, v, (b-a)/(i - 1))
	s = solution_vector(i)
	u = np.linalg.solve(ace, s)
	if(i == 15):
		plt.plot(x, u, label = 'Finite Difference')
	error[0][0][i - 4] = calc_error(u, x, i, c, v);
	count[i-4] = i



for i in range(4, 51):
	x = cheby(0, 1, i)
	M = Dhat(x)
	mod = (-v*np.dot(M, M) + c*M)
	s = solution_vector(i)
	mod = magic(mod, i)
	u = np.linalg.solve(mod, s)
	if(i == 15):
		plt.plot(x, u, label = 'Legrange w/Chebyshev Points')
	error[0][1][i - 4] = calc_error(u, x, i, c, v);


for i in range(4, 51):
	x = uniform(0, 1, i)
	M = Dhat(x)
	mod = (-v*np.dot(M, M) + c*M)
	mod = magic(mod, i)
	s = solution_vector(i)
	u = np.linalg.solve(mod, s)
	if(i == 15):
		plt.plot(x, u, label = 'Legrange w/Uniform Points')
	error[0][2][i - 4] = calc_error(u, x, i, c, v);

plt.xlabel('n')
plt.ylabel('x')
plt.title('Values for methods given: v=0.1 with n=15')
plt.text(69, .025, r'$\mu=100, \ \sigma=1$')

plt.legend(loc = 'best')		
plt.show()


plt.xlabel('Iteration')
plt.ylabel('error')
plt.title('Error for methods given: v=0.1 (semi-log plot)')
plt.text(69, .025, r'$\mu=100, \ \sigma=1$')

sub = plt.subplot(111)
sub.set_yscale('log')
plt.plot(count, error[0,0], label = 'Finite Difference w/Uniform Points')
plt.plot(count, error[0,1], label = 'Legrange w/Chebyshev points')
plt.plot(count, error[0,2], label = 'Legrange w/Uniform Points')
plt.legend(loc = 'best')
plt.show()


plt.xlabel('Iteration')
plt.ylabel('error')
plt.title('Error for methods given: v=0.1 (log-log plot)')
plt.text(69, .025, r'$\mu=100, \ \sigma=1$')

sub = plt.subplot(111)
sub.set_yscale('log')
sub.set_xscale('log')
plt.plot(count, error[0,0], label = 'Finite Difference w/Uniform Points')
plt.plot(count, error[0,1], label = 'Legrange w/Chebyshev points')
plt.plot(count, error[0,2], label = 'Legrange w/Uniform Points')
plt.legend(loc='best')
plt.show()





a = 0.0
b = 1.0
c = 1.0
v = .01

sol = np.zeros((400))
x = uniform(a, b, 400)
for i in range (0, 400):
	sol[i] = solution(x[i], c, v)

plt.plot(x, sol, label = 'solution')

error = np.zeros((2, 3, 47)) 
count = np.zeros((47))

for i in range(4, 51):
	x = uniform(0, 1, i)
	ace = build_it(a, b, i, c, v, (b-a)/(i - 1))
	s = solution_vector(i)
	u = np.linalg.solve(ace, s)
	if(i == 15):
		plt.plot(x, u, label = 'Finite Difference')
	error[0][0][i - 4] = calc_error(u, x, i, c, v);
	count[i-4] = i



for i in range(4, 51):
	x = cheby(0, 1, i)
	M = Dhat(x)
	mod = (-v*np.dot(M, M) + c*M)
	s = solution_vector(i)
	mod = magic(mod, i)
	u = np.linalg.solve(mod, s)
	if(i == 15):
		plt.plot(x, u, label = 'Legrange w/Chebyshev Points')
	error[0][1][i - 4] = calc_error(u, x, i, c, v);


for i in range(4, 51):
	x = uniform(0, 1, i)
	M = Dhat(x)
	mod = (-v*np.dot(M, M) + c*M)
	mod = magic(mod, i)
	s = solution_vector(i)
	u = np.linalg.solve(mod, s)
	if(i == 15):
		plt.plot(x, u, label = 'Legrange w/Uniform Points')
	error[0][2][i - 4] = calc_error(u, x, i, c, v);


plt.xlabel('n')
plt.ylabel('x')
plt.title('Values for methods given: v=0.01 with n=15')
plt.text(69, .025, r'$\mu=100, \ \sigma=1$')

plt.legend(loc = 'best')		
plt.show()


plt.xlabel('Iteration')
plt.ylabel('error')
plt.title('Error for methods given: v=0.01 (semi-log plot)')
plt.text(69, .025, r'$\mu=100, \ \sigma=1$')

sub = plt.subplot(111)
sub.set_yscale('log')
plt.plot(count, error[0,0], label = 'Finite Difference w/Uniform Points')
plt.plot(count, error[0,1], label = 'Legrange w/Chebyshev points')
plt.plot(count, error[0,2], label = 'Legrange w/Uniform Points')
plt.legend(loc = 'best')
plt.show()


plt.xlabel('Iteration')
plt.ylabel('error')
plt.title('Error for methods given: v=0.01 (log-log plot)')
plt.text(69, .025, r'$\mu=100, \ \sigma=1$')

sub = plt.subplot(111)
sub.set_yscale('log')
sub.set_xscale('log')
plt.plot(count, error[0,0], label = 'Finite Difference w/Uniform Points')
plt.plot(count, error[0,1], label = 'Legrange w/Chebyshev points')
plt.plot(count, error[0,2], label = 'Legrange w/Uniform Points')
plt.legend(loc='best')
plt.show()



